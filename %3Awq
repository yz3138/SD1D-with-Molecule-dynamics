from matplotlib import pyplot as plt
from boutdata import collect
from boututils.showdata import showdata
from numpy import zeros


Te_wo_w = collect("Te",path='no_molecules_test_frecycle_0.99_Flux_4e23/')
Te_w_wo = collect("Te",path='with_molecules_test_frecycle_0.99/')
Te_w_w = collect("Te",path='with_molecules_test_lossrate_1e4_frecycle_0.99/')
Te_w_w_1e5 = collect("Te",path='with_molecules_test_lossrate_1e5_frecycle_0.99/')  ##[-1,0,1:-1,0]
Te_wo_w_1e5 = collect("Te",path='no_molecules_test_frecycle_0.99_Flux_4e23_loss_1e5')
Te_wo_wo = collect("Te",path='no_molecules_test/')

path = 'with_molecules_test_lossrate_1e4_frecycle_0.99/'
nnorm = collect("Nnorm", path=path)
tnorm = collect("Tnorm", path=path)
pnorm = nnorm*tnorm*1.602e-19 # Converts p to Pascals
cs0 = collect("Cs0", path=path)

dy = collect("dy", path=path, yguards=True) [0,:]
n = len(Te_w_w[-1,0,:,0])
pos = zeros(n)

t = -1

pos[0] = 0.5*dy[1]
#pos[1] = 0.5*dy[1]
for i in range(1,n):
    pos[i] = pos[i-1] + 0.5*dy[i-1] + 0.5*dy[i]

#def replace_guards(var):
    """
    This in-place replaces the points in the guard cells with the points on the boundary

    """
#    var[0] = 0.5*(var[0] + var[1])
 #   var[-1] = 0.5*(var[-1] + var[-2])

#replace_guards(pos)
#replace_guards(Te_wo_w)
#replace_guards(Te_w_wo)
#replace_guards(Te_w_w)
#replace_guards(Te_wo_wo)

#Te_wo_w[-1] = Te_wo_w[-2] # Zero-gradient Te
#Te_w_wo[-1] = Te_w_wo[-2]
#Te_w_w[-1] = Te_w_w[-2]
#Te_wo_wo[-1] = Te_wo_wo[-2]

#pos.shape
#Te_w_w.shape
print(pos[:])
print(n)
plt.plot(pos-0.54,Te_w_wo[t,0,:,0]*tnorm,label='H2+,no pumping')
plt.plot(pos-0.54,Te_w_w[t,0,:,0]*tnorm,label='H2+,pumping rate 1e4')
plt.plot(pos-0.54,Te_w_w_1e5[t,0,:,0]*tnorm,label='H2+,pumping rate 1e5')
plt.plot(pos-0.54,Te_wo_wo[t,0,:,0]*tnorm,'--',label='no H2+,no pumping')
plt.plot(pos-0.54,Te_wo_w[t,0,:,0]*tnorm,'--',label='no H2,pumping rate 1e4')
plt.plot(pos-0.54,Te_wo_w_1e5[t,0,:,0]*tnorm,'--',label='no H2+,pumping rate 1e5')

plt.legend(loc='upper right')

plt.grid(True)
plt.xlim([29,30])
plt.xlabel("Position [m]")
plt.ylabel(r'Electron temperature [eV]')
plt.savefig("Profile_Te.pdf")
plt.show()
